	Exemplo 1-

from collections import deque

x = deque(['a', 'b', 'c'])
y1 = deque(['abc'])
y2 = deque('abc')
z = deque([{'data': 'a'}, {'data': 'b'}])

print(x)
print(y1)
print(y2)
print(z)


	Exemplo 2-

from collections import deque

x = deque(['a', 'b', 'c'])

x.append('d')
print(x)

y = x.pop()
print(x)
print(y)


	Exemplo 3-

from collections import deque

x = deque(['a', 'b', 'c'])

x.appendleft('d')
print(x)

y = x.popleft()
print(x)
print(y)


	Exemplo 4-

from collections import deque

# Um exemplo de uma Queue.
nomes = deque(['Joao', 'Maria', 'Rafael', 'Marcelo', 'Joana'])
print(nomes)

# Uma Queue usa a prioridade de FIFO.
nomes.popleft()
print(nomes)


	Exemplo 5-

from collections import deque

# Um exemplo de uma Stack.
nomes = deque(['Joao', 'Maria', 'Rafael', 'Marcelo', 'Joana'])
print(nomes)

# Uma Stack usa a prioridade de FILO.
nomes.pop()
print(nomes)


	Exemplo 6-

# Criando uma Linked List

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

    def __repr__(self):
        return self.data


class LinkedList:
    def __init__(self):
        self.head = None

    def __repr__(self):
        node = self.head
        nodes = []
        while node is not None:
            nodes.append(node.data)
            node = node.next
        nodes.append("None")
        return ' -> '.join(nodes)


lista = LinkedList()
fist_node = Node('a')
lista.head = fist_node

second_node = Node('b')
third_node = Node('c')

fist_node.next = second_node
second_node.next = third_node

print(lista)


	Exemplo 6-

# Criando uma Linked List

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

    def __repr__(self):
        return self.data


class LinkedList:
    def __init__(self, nodes=None):
        self.head = None
        if nodes is not None:
            node = Node(data=nodes.pop(0))
            self.head = node
            for elem in nodes:
                node.next = Node(data=elem)
                node = node.next

    def __repr__(self):
        node = self.head
        nodes = []
        while node is not None:
            nodes.append(node.data)
            node = node.next
        nodes.append("None")
        return ' -> '.join(nodes)
    
    def __iter__(self):
        node = self.head
        while node is not None:
            yield node
            node = node.next


lista = LinkedList()
fist_node = Node('a')
lista.head = fist_node

second_node = Node('b')
third_node = Node('c')

fist_node.next = second_node
second_node.next = third_node

print(lista)


	Exemplo 7-

# Criando uma Linked List

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

    def __repr__(self):
        return self.data


class LinkedList:
    def __init__(self, nodes=None):
        self.head = None
        if nodes is not None:
            node = Node(data=nodes.pop(0))
            self.head = node
            for elem in nodes:
                node.next = Node(data=elem)
                node = node.next

    def __repr__(self):
        node = self.head
        nodes = []
        while node is not None:
            nodes.append(node.data)
            node = node.next
        nodes.append("None")
        return ' -> '.join(nodes)

    def __iter__(self):
        node = self.head
        while node is not None:
            yield node
            node = node.next

    def add_first(self, node):
        node.next = self.head
        self.head = node

    def add_last(self, node):
        if self.head is None:
            self.head = node
            return
        for current_node in self:
            pass
        current_node.next = node


lista = LinkedList()
fist_node = Node('a')
lista.head = fist_node

second_node = Node('b')
third_node = Node('c')

fist_node.next = second_node
second_node.next = third_node
print(lista)

lista.add_first(Node('r'))
print(lista)

lista.add_last(Node('d'))
print(lista)


	Exemplo 8-

# Criando uma Linked List

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

    def __repr__(self):
        return self.data


class LinkedList:
    def __init__(self, nodes=None):
        self.head = None
        if nodes is not None:
            node = Node(data=nodes.pop(0))
            self.head = node
            for elem in nodes:
                node.next = Node(data=elem)
                node = node.next

    def __repr__(self):
        node = self.head
        nodes = []
        while node is not None:
            nodes.append(node.data)
            node = node.next
        nodes.append("None")
        return ' -> '.join(nodes)

    def __iter__(self):
        node = self.head
        while node is not None:
            yield node
            node = node.next

    def add_first(self, node):
        node.next = self.head
        self.head = node

    def add_last(self, node):
        if self.head is None:
            self.head = node
            return
        for current_node in self:
            pass
        current_node.next = node

    def add_after(self, target_node_data, new_node):
        if self.head is None:
            raise Exception('List is empty')
        for node in self:
            if node.data == target_node_data:
                new_node.next = node.next
                node.next = new_node
                return
        raise Exception("Node with data '%s' not found" % target_node_data)


lista = LinkedList()
fist_node = Node('a')
lista.head = fist_node

second_node = Node('b')
third_node = Node('c')

fist_node.next = second_node
second_node.next = third_node
print(lista)

lista.add_first(Node('r'))
print(lista)

lista.add_last(Node('d'))
print(lista)

lista.add_after('r', Node('s'))
print(lista)


	Exemplo 9-

# Criando uma Linked List

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

    def __repr__(self):
        return self.data


class LinkedList:
    def __init__(self, nodes=None):
        self.head = None
        if nodes is not None:
            node = Node(data=nodes.pop(0))
            self.head = node
            for elem in nodes:
                node.next = Node(data=elem)
                node = node.next

    def __repr__(self):
        node = self.head
        nodes = []
        while node is not None:
            nodes.append(node.data)
            node = node.next
        nodes.append("None")
        return ' -> '.join(nodes)

    def __iter__(self):
        node = self.head
        while node is not None:
            yield node
            node = node.next

    def add_first(self, node):
        node.next = self.head
        self.head = node

    def add_last(self, node):
        if self.head is None:
            self.head = node
            return
        for current_node in self:
            pass
        current_node.next = node

    def add_after(self, target_node_data, new_node):
        if self.head is None:
            raise Exception('List is empty')
        for node in self:
            if node.data == target_node_data:
                new_node.next = node.next
                node.next = new_node
                return
        raise Exception("Node with data '%s' not found" % target_node_data)

    def add_before(self, target_node_data, new_node):
        if self.head is None:
            raise Exception('List is empty')
        if self.head.data == target_node_data:
            return self.add_first(new_node)
        prev_node = self.head
        for node in self:
            if node.data == target_node_data:
                prev_node.next = new_node
                new_node.next = node
                return
            prev_node = node
        raise Exception("Node with data '%s' not found" % target_node_data)


lista = LinkedList()
fist_node = Node('a')
lista.head = fist_node

second_node = Node('b')
third_node = Node('c')

fist_node.next = second_node
second_node.next = third_node
print(lista)

lista.add_first(Node('r'))
print(lista)

lista.add_last(Node('d'))
print(lista)

lista.add_after('r', Node('s'))
print(lista)

lista.add_before('d', Node('p'))
print(lista)


	Exemplo 10-

# Criando uma Linked List

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

    def __repr__(self):
        return self.data


class LinkedList:
    def __init__(self, nodes=None):
        self.head = None
        if nodes is not None:
            node = Node(data=nodes.pop(0))
            self.head = node
            for elem in nodes:
                node.next = Node(data=elem)
                node = node.next

    def __repr__(self):
        node = self.head
        nodes = []
        while node is not None:
            nodes.append(node.data)
            node = node.next
        nodes.append("None")
        return ' -> '.join(nodes)

    def __iter__(self):
        node = self.head
        while node is not None:
            yield node
            node = node.next

    def add_first(self, node):
        node.next = self.head
        self.head = node

    def add_last(self, node):
        if self.head is None:
            self.head = node
            return
        for current_node in self:
            pass
        current_node.next = node

    def add_after(self, target_node_data, new_node):
        if self.head is None:
            raise Exception('List is empty')
        for node in self:
            if node.data == target_node_data:
                new_node.next = node.next
                node.next = new_node
                return
        raise Exception("Node with data '%s' not found" % target_node_data)

    def add_before(self, target_node_data, new_node):
        if self.head is None:
            raise Exception('List is empty')
        if self.head.data == target_node_data:
            return self.add_first(new_node)
        prev_node = self.head
        for node in self:
            if node.data == target_node_data:
                prev_node.next = new_node
                new_node.next = node
                return
            prev_node = node
        raise Exception("Node with data '%s' not found" % target_node_data)

    def remove_node(self, target_node_data):
        if self.head is None:
            raise Exception('Lista is empty')
        if self.head.data == target_node_data:
            self.head = self.head.next
            return
        previous_node = self.head
        for node in self:
            if node.data == target_node_data:
                previous_node.next = node.next
                return
            previous_node = node
        raise Exception("Node with data '%s' not found" % target_node_data)


lista = LinkedList()
fist_node = Node('a')
lista.head = fist_node

second_node = Node('b')
third_node = Node('c')

fist_node.next = second_node
second_node.next = third_node
print(lista)
# Podemos criar também como lista=LinkedList(['a', 'b', 'c'])

lista.add_first(Node('r'))
print(lista)

lista.add_last(Node('d'))
print(lista)

lista.add_after('r', Node('s'))
print(lista)

lista.add_before('d', Node('p'))
print(lista)

lista.remove_node('r')
print(lista)


	Exemplo 11-

# Aqui temos um Doubly Linked List
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.previous = None


	Exemplo 12-

# Um exemplo duma LinkedList circular

class CircularLinkedList:
    def __init__(self):
        self.head = None

    def traverse(self, starting_point=None):
        if starting_point is None:
            starting_point = self.head
        node = starting_point
        while node is not None and (node.next != starting_point):
            yield node
            node = node.next
        yield node

    def print_list(self, starting_point=None):
        nodes = []
        for node in self.traverse(starting_point):
            nodes.append(str(node))
        print(" -> ".join(nodes))


	Exemplo 12-


